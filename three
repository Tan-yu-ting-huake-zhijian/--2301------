public List<Path> findAllPaths(String startName, String endName) {
        if (!stations.containsKey(startName) || !stations.containsKey(endName)) {
            throw new IllegalArgumentException("Station not found");
        }
        
        Station start = stations.get(startName);
        Station end = stations.get(endName);
        List<Path> paths = new ArrayList<>();
        Set<Station> visited = new HashSet<>();
        Stack<Station> pathStack = new Stack<>();
        
        findAllPathsDFS(start, end, visited, pathStack, paths);
        return paths;
    }
    
    private void findAllPathsDFS(Station current, Station end, Set<Station> visited, 
                               Stack<Station> pathStack, List<Path> paths) {
        visited.add(current);
        pathStack.push(current);
        
        if (current.equals(end)) {
            Path path = new Path(new ArrayList<>(pathStack));
            paths.add(path);
        } else {
            for (Connection conn : current.getConnections()) {
                Station neighbor = conn.getOtherStation(current);
                if (!visited.contains(neighbor)) {
                    findAllPathsDFS(neighbor, end, visited, pathStack, paths);
                }
            }
        }
        
        pathStack.pop();
        visited.remove(current);
    }
     public Path findShortestPath(String startName, String endName) {
        if (!stations.containsKey(startName) || !stations.containsKey(endName)) {
            throw new IllegalArgumentException("Station not found");
        }
        
        Station start = stations.get(startName);
        Station end = stations.get(endName);
        
        Map<Station, Double> distances = new HashMap<>();
        Map<Station, Station> previous = new HashMap<>();
        PriorityQueue<Station> queue = new PriorityQueue<>(
            Comparator.comparingDouble(station -> distances.getOrDefault(station, Double.MAX_VALUE)));
        
        for (Station station : stations.values()) {
            if (station.equals(start)) {
                distances.put(station, 0.0);
            } else {
                distances.put(station, Double.MAX_VALUE);
            }
            queue.add(station);
        }
        
        while (!queue.isEmpty()) {
            Station current = queue.poll();
            
            if (current.equals(end)) {
                break;
            }
            
            for (Connection conn : current.getConnections()) {
                Station neighbor = conn.getOtherStation(current);
                double alt = distances.get(current) + conn.getDistance();
                
                if (alt < distances.get(neighbor)) {
                    distances.put(neighbor, alt);
                    previous.put(neighbor, current);
                    // 更新优先队列中的位置
                    queue.remove(neighbor);
                    queue.add(neighbor);
                }
            }
        }
        
        // 构建路径
        List<Station> pathStations = new ArrayList<>();
        Station current = end;
        while (current != null) {
            pathStations.add(0, current);
            current = previous.get(current);
        }
        
        return new Path(pathStations);
    }
    